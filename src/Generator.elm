module Generator exposing (requestToResponse)

import Elm.CodeGen as C
import Elm.Pretty
import Elm.Syntax.Module as Module
import Elm.Syntax.Node as Node
import Errors exposing (Res)
import Generator.Declarations exposing (removeDuplicateDeclarations)
import Generator.Enum as Enum
import Generator.Import as Import
import Generator.Message as Message
import Mapper as Mapper
import Mapper.Name as Name
import Mapper.Struct exposing (Struct)
import Model exposing (Field(..))
import Proto.Google.Protobuf.Compiler.Plugin exposing (CodeGeneratorRequest, CodeGeneratorResponse, CodeGeneratorResponse_File)
import Proto.Google.Protobuf.Descriptor exposing (FileDescriptorProto)
import Protobuf.Types.Int64
import Result.Extra
import Set


type alias Versions =
    { plugin : String
    , library : String
    , compiler : String
    }


requestToResponse :
    Versions
    -> CodeGeneratorRequest
    -> CodeGeneratorResponse
requestToResponse versions req =
    let
        filesToResponse : List (Res CodeGeneratorResponse_File) -> CodeGeneratorResponse
        filesToResponse fileResults =
            let
                ( file, errors ) =
                    Result.Extra.partition fileResults
            in
            { error = Errors.MultipleErrors errors |> Errors.format, supportedFeatures = Protobuf.Types.Int64.fromInts 0 3, file = file }

        files =
            convert versions req.fileToGenerate req.protoFile
    in
    files |> List.map (Result.map generate) |> filesToResponse


generate : C.File -> CodeGeneratorResponse_File
generate file =
    { name = (Node.value file.moduleDefinition |> Module.moduleName |> String.join "/") ++ ".elm"
    , content = "{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}\n\n" ++ Elm.Pretty.pretty 120 file
    , insertionPoint = ""
    , generatedCodeInfo = Nothing
    }


convert : Versions -> List String -> List FileDescriptorProto -> List (Res C.File)
convert versions fileNames descriptors =
    let
        files : List ( String, Res Struct )
        files =
            descriptors
                |> List.filter (.name >> (\name -> List.member name fileNames))
                |> Mapper.mapMain
    in
    files
        |> List.map
            (\( fileName, structResult ) ->
                case structResult of
                    Ok struct ->
                        let
                            modName =
                                Name.module_ fileName

                            declarations =
                                List.concatMap Enum.toAST struct.enums
                                    ++ List.concatMap Message.toAST struct.messages
                        in
                        Ok <|
                            C.file
                                (C.normalModule modName [])
                                (List.map (\importedModule -> C.importStmt importedModule Nothing Nothing) (Set.toList <| Import.extractImports declarations))
                                (removeDuplicateDeclarations declarations)
                                (C.emptyFileComment |> fileComment versions fileName |> Just)

                    Err err ->
                        Err err
            )


fileComment : Versions -> String -> C.Comment C.FileComment -> C.Comment C.FileComment
fileComment versions fileName =
    C.markdown <| """
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) """ ++ versions.plugin ++ """
- `protoc` """ ++ versions.compiler ++ """
- the following specification file: `""" ++ fileName ++ """`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version """ ++ versions.library ++ """ or higher."""
