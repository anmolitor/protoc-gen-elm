{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Google.Protobuf.FieldOptions exposing (CType(..), JSType(..), decodeCType, decodeJSType, defaultCType, defaultJSType, encodeCType, encodeJSType, fieldNumbersCType, fieldNumbersJSType, fromInternalCType, fromInternalJSType, toInternalCType, toInternalJSType)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 3.2.0
- `protoc` 3.19.4
- the following specification files: `google/protobuf/descriptor.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version 1.2.0 or higher.


@docs CType, JSType, decodeCType, decodeJSType, defaultCType, defaultJSType, encodeCType, encodeJSType, fieldNumbersCType, fieldNumbersJSType
@docs fromInternalCType, fromInternalJSType, toInternalCType, toInternalJSType
-}

import Proto.Google.Protobuf.Internals_
import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `JSType`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersJSType : JSType -> Int
fieldNumbersJSType n_ =
    case n_ of
        JSNORMAL ->
            0

        JSSTRING ->
            1

        JSNUMBER ->
            2


{-| Default for JSType. Should only be used for 'required' decoders as an initial value.


-}
defaultJSType : JSType
defaultJSType =
    JSNORMAL


{-| Convert a `JSType` into its internal representation `Proto__Google__Protobuf__FieldOptions__JSType`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
toInternalJSType : JSType -> Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSType
toInternalJSType data_ =
    case data_ of
        JSNORMAL ->
            Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSNORMAL

        JSSTRING ->
            Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSSTRING

        JSNUMBER ->
            Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSNUMBER


{-| Convert the internal type `Proto__Google__Protobuf__FieldOptions__JSType` into a `JSType`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
fromInternalJSType : Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSType -> JSType
fromInternalJSType data_ =
    case data_ of
        Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSNORMAL ->
            JSNORMAL

        Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSSTRING ->
            JSSTRING

        Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__JSNUMBER ->
            JSNUMBER


{-| Declares how to encode a `JSType` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeJSType : JSType -> Protobuf.Encode.Encoder
encodeJSType =
    toInternalJSType >> Proto.Google.Protobuf.Internals_.encodeProto__Google__Protobuf__FieldOptions__JSType


{-| Declares how to decode a `JSType` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeJSType : Protobuf.Decode.Decoder JSType
decodeJSType =
    Protobuf.Decode.map
        fromInternalJSType
        Proto.Google.Protobuf.Internals_.decodeProto__Google__Protobuf__FieldOptions__JSType


{-| `JSType` enumeration


-}
type JSType
    = JSNORMAL
    | JSSTRING
    | JSNUMBER


{-| The field numbers for the fields of `CType`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersCType : CType -> Int
fieldNumbersCType n_ =
    case n_ of
        STRING ->
            0

        CORD ->
            1

        STRINGPIECE ->
            2


{-| Default for CType. Should only be used for 'required' decoders as an initial value.


-}
defaultCType : CType
defaultCType =
    STRING


{-| Convert a `CType` into its internal representation `Proto__Google__Protobuf__FieldOptions__CType`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
toInternalCType : CType -> Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__CType
toInternalCType data_ =
    case data_ of
        STRING ->
            Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__STRING

        CORD ->
            Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__CORD

        STRINGPIECE ->
            Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__STRINGPIECE


{-| Convert the internal type `Proto__Google__Protobuf__FieldOptions__CType` into a `CType`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
fromInternalCType : Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__CType -> CType
fromInternalCType data_ =
    case data_ of
        Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__STRING ->
            STRING

        Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__CORD ->
            CORD

        Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__FieldOptions__STRINGPIECE ->
            STRINGPIECE


{-| Declares how to encode a `CType` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeCType : CType -> Protobuf.Encode.Encoder
encodeCType =
    toInternalCType >> Proto.Google.Protobuf.Internals_.encodeProto__Google__Protobuf__FieldOptions__CType


{-| Declares how to decode a `CType` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeCType : Protobuf.Decode.Decoder CType
decodeCType =
    Protobuf.Decode.map
        fromInternalCType
        Proto.Google.Protobuf.Internals_.decodeProto__Google__Protobuf__FieldOptions__CType


{-| `CType` enumeration


-}
type CType
    = STRING
    | CORD
    | STRINGPIECE
