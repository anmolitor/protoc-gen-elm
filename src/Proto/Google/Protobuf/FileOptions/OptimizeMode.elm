{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Google.Protobuf.FileOptions.OptimizeMode exposing (OptimizeMode(..), decodeOptimizeMode, defaultOptimizeMode, encodeOptimizeMode, fieldNumbersOptimizeMode)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 3.4.4
- `protoc` 3.19.4
- the following specification files: `google/protobuf/descriptor.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version 1.2.0 or higher.

@docs OptimizeMode, decodeOptimizeMode, defaultOptimizeMode, encodeOptimizeMode, fieldNumbersOptimizeMode

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `OptimizeMode`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOptimizeMode : OptimizeMode -> Int
fieldNumbersOptimizeMode n_ =
    case n_ of
        SPEED ->
            1

        CODESIZE ->
            2

        LITERUNTIME ->
            3


{-| Default for OptimizeMode. Should only be used for 'required' decoders as an initial value.

-}
defaultOptimizeMode : OptimizeMode
defaultOptimizeMode =
    SPEED


{-| Declares how to encode a `OptimizeMode` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOptimizeMode : OptimizeMode -> Protobuf.Encode.Encoder
encodeOptimizeMode value =
    Protobuf.Encode.int32 <|
        case value of
            SPEED ->
                1

            CODESIZE ->
                2

            LITERUNTIME ->
                3


{-| Declares how to decode a `OptimizeMode` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOptimizeMode : Protobuf.Decode.Decoder OptimizeMode
decodeOptimizeMode =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    1 ->
                        SPEED

                    2 ->
                        CODESIZE

                    3 ->
                        LITERUNTIME

                    _ ->
                        SPEED
            )


{-| `OptimizeMode` enumeration

-}
type OptimizeMode
    = SPEED
    | CODESIZE
    | LITERUNTIME
