{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Google.Protobuf.FieldDescriptorProto.Label exposing (Label(..), decodeLabel, defaultLabel, encodeLabel, fieldNumbersLabel, jsonDecodeLabel, jsonEncodeLabel)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.0-beta.0
- `protoc` 3.19.4
- the following specification files: `google/protobuf/descriptor.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version 1.2.0 or higher.

@docs Label, decodeLabel, defaultLabel, encodeLabel, fieldNumbersLabel, jsonDecodeLabel, jsonEncodeLabel

-}

import Json.Decode
import Json.Encode
import Protobuf.Decode
import Protobuf.Encode


{-| Decode a `Label` from JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonDecodeLabel : Json.Decode.Decoder Label
jsonDecodeLabel =
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.map
                (\i ->
                    case i of
                        "LABEL_OPTIONAL" ->
                            LABELOPTIONAL

                        "LABEL_REQUIRED" ->
                            LABELREQUIRED

                        "LABEL_REPEATED" ->
                            LABELREPEATED

                        _ ->
                            LABELOPTIONAL
                )
        , Json.Decode.int
            |> Json.Decode.map
                (\i ->
                    case i of
                        1 ->
                            LABELOPTIONAL

                        2 ->
                            LABELREQUIRED

                        3 ->
                            LABELREPEATED

                        _ ->
                            LABELOPTIONAL
                )
        ]


{-| Encode a `Label` to JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonEncodeLabel : Label -> Json.Encode.Value
jsonEncodeLabel value =
    Json.Encode.string <|
        case value of
            LABELOPTIONAL ->
                "LABEL_OPTIONAL"

            LABELREQUIRED ->
                "LABEL_REQUIRED"

            LABELREPEATED ->
                "LABEL_REPEATED"


{-| The field numbers for the fields of `Label`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersLabel : Label -> Int
fieldNumbersLabel n_ =
    case n_ of
        LABELOPTIONAL ->
            1

        LABELREQUIRED ->
            2

        LABELREPEATED ->
            3


{-| Default for Label. Should only be used for 'required' decoders as an initial value.

-}
defaultLabel : Label
defaultLabel =
    LABELOPTIONAL


{-| Declares how to encode a `Label` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeLabel : Label -> Protobuf.Encode.Encoder
encodeLabel value =
    Protobuf.Encode.int32 <|
        case value of
            LABELOPTIONAL ->
                1

            LABELREQUIRED ->
                2

            LABELREPEATED ->
                3


{-| Declares how to decode a `Label` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeLabel : Protobuf.Decode.Decoder Label
decodeLabel =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    1 ->
                        LABELOPTIONAL

                    2 ->
                        LABELREQUIRED

                    3 ->
                        LABELREPEATED

                    _ ->
                        LABELOPTIONAL
            )


{-| `Label` enumeration

-}
type Label
    = LABELOPTIONAL
    | LABELREQUIRED
    | LABELREPEATED
