{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Google.Protobuf.Syntax exposing (Syntax(..), decodeSyntax, defaultSyntax, encodeSyntax, fieldNumbersSyntax, jsonDecodeSyntax, jsonEncodeSyntax)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.0-beta.0
- `protoc` 3.19.4
- the following specification files: `google/protobuf/type.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version 1.2.0 or higher.

@docs Syntax, decodeSyntax, defaultSyntax, encodeSyntax, fieldNumbersSyntax, jsonDecodeSyntax, jsonEncodeSyntax

-}

import Json.Decode
import Json.Encode
import Protobuf.Decode
import Protobuf.Encode
import String


{-| Decode a `Syntax` from JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonDecodeSyntax : Json.Decode.Decoder Syntax
jsonDecodeSyntax =
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.map
                (\i ->
                    case i of
                        "SYNTAX_PROTO2" ->
                            SYNTAXPROTO2

                        "SYNTAX_PROTO3" ->
                            SYNTAXPROTO3

                        _ ->
                            SYNTAXPROTO2
                )
        , Json.Decode.int
            |> Json.Decode.map
                (\i ->
                    case i of
                        0 ->
                            SYNTAXPROTO2

                        1 ->
                            SYNTAXPROTO3

                        _ ->
                            SYNTAXPROTO2
                )
        ]


{-| Encode a `Syntax` to JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonEncodeSyntax : Syntax -> Json.Encode.Value
jsonEncodeSyntax value =
    Json.Encode.string <|
        case value of
            SYNTAXPROTO2 ->
                "SYNTAX_PROTO2"

            SYNTAXPROTO3 ->
                "SYNTAX_PROTO3"

            SyntaxUnrecognized_ i ->
                "_UNRECOGNIZED_" ++ String.fromInt i


{-| The field numbers for the fields of `Syntax`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSyntax : Syntax -> Int
fieldNumbersSyntax n_ =
    case n_ of
        SYNTAXPROTO2 ->
            0

        SYNTAXPROTO3 ->
            1

        SyntaxUnrecognized_ m_ ->
            m_


{-| Default for Syntax. Should only be used for 'required' decoders as an initial value.

-}
defaultSyntax : Syntax
defaultSyntax =
    SYNTAXPROTO2


{-| Declares how to encode a `Syntax` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSyntax : Syntax -> Protobuf.Encode.Encoder
encodeSyntax value =
    Protobuf.Encode.int32 <|
        case value of
            SYNTAXPROTO2 ->
                0

            SYNTAXPROTO3 ->
                1

            SyntaxUnrecognized_ i ->
                i


{-| Declares how to decode a `Syntax` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSyntax : Protobuf.Decode.Decoder Syntax
decodeSyntax =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        SYNTAXPROTO2

                    1 ->
                        SYNTAXPROTO3

                    _ ->
                        SyntaxUnrecognized_ i
            )


{-| `Syntax` enumeration

-}
type Syntax
    = SYNTAXPROTO2
    | SYNTAXPROTO3
    | SyntaxUnrecognized_ Int
