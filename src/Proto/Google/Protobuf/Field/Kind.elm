{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Google.Protobuf.Field.Kind exposing (Kind(..), decodeKind, defaultKind, encodeKind, fieldNumbersKind, jsonDecodeKind, jsonEncodeKind)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.0-beta.0
- `protoc` 3.19.4
- the following specification files: `google/protobuf/type.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version 1.2.0 or higher.

@docs Kind, decodeKind, defaultKind, encodeKind, fieldNumbersKind, jsonDecodeKind, jsonEncodeKind

-}

import Json.Decode
import Json.Encode
import Protobuf.Decode
import Protobuf.Encode
import Protobuf.Utils.Int32
import String


{-| Decode a `Kind` from JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonDecodeKind : Json.Decode.Decoder Kind
jsonDecodeKind =
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.map
                (\i ->
                    case i of
                        "TYPE_UNKNOWN" ->
                            TYPEUNKNOWN

                        "TYPE_DOUBLE" ->
                            TYPEDOUBLE

                        "TYPE_FLOAT" ->
                            TYPEFLOAT

                        "TYPE_INT64" ->
                            TYPEINT64

                        "TYPE_UINT64" ->
                            TYPEUINT64

                        "TYPE_INT32" ->
                            TYPEINT32

                        "TYPE_FIXED64" ->
                            TYPEFIXED64

                        "TYPE_FIXED32" ->
                            TYPEFIXED32

                        "TYPE_BOOL" ->
                            TYPEBOOL

                        "TYPE_STRING" ->
                            TYPESTRING

                        "TYPE_GROUP" ->
                            TYPEGROUP

                        "TYPE_MESSAGE" ->
                            TYPEMESSAGE

                        "TYPE_BYTES" ->
                            TYPEBYTES

                        "TYPE_UINT32" ->
                            TYPEUINT32

                        "TYPE_ENUM" ->
                            TYPEENUM

                        "TYPE_SFIXED32" ->
                            TYPESFIXED32

                        "TYPE_SFIXED64" ->
                            TYPESFIXED64

                        "TYPE_SINT32" ->
                            TYPESINT32

                        "TYPE_SINT64" ->
                            TYPESINT64

                        _ ->
                            TYPEUNKNOWN
                )
        , Protobuf.Utils.Int32.int32JsonDecoder
            |> Json.Decode.map
                (\i ->
                    case i of
                        0 ->
                            TYPEUNKNOWN

                        1 ->
                            TYPEDOUBLE

                        2 ->
                            TYPEFLOAT

                        3 ->
                            TYPEINT64

                        4 ->
                            TYPEUINT64

                        5 ->
                            TYPEINT32

                        6 ->
                            TYPEFIXED64

                        7 ->
                            TYPEFIXED32

                        8 ->
                            TYPEBOOL

                        9 ->
                            TYPESTRING

                        10 ->
                            TYPEGROUP

                        11 ->
                            TYPEMESSAGE

                        12 ->
                            TYPEBYTES

                        13 ->
                            TYPEUINT32

                        14 ->
                            TYPEENUM

                        15 ->
                            TYPESFIXED32

                        16 ->
                            TYPESFIXED64

                        17 ->
                            TYPESINT32

                        18 ->
                            TYPESINT64

                        _ ->
                            TYPEUNKNOWN
                )
        ]


{-| Encode a `Kind` to JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonEncodeKind : Kind -> Json.Encode.Value
jsonEncodeKind value =
    Json.Encode.string <|
        case value of
            TYPEUNKNOWN ->
                "TYPE_UNKNOWN"

            TYPEDOUBLE ->
                "TYPE_DOUBLE"

            TYPEFLOAT ->
                "TYPE_FLOAT"

            TYPEINT64 ->
                "TYPE_INT64"

            TYPEUINT64 ->
                "TYPE_UINT64"

            TYPEINT32 ->
                "TYPE_INT32"

            TYPEFIXED64 ->
                "TYPE_FIXED64"

            TYPEFIXED32 ->
                "TYPE_FIXED32"

            TYPEBOOL ->
                "TYPE_BOOL"

            TYPESTRING ->
                "TYPE_STRING"

            TYPEGROUP ->
                "TYPE_GROUP"

            TYPEMESSAGE ->
                "TYPE_MESSAGE"

            TYPEBYTES ->
                "TYPE_BYTES"

            TYPEUINT32 ->
                "TYPE_UINT32"

            TYPEENUM ->
                "TYPE_ENUM"

            TYPESFIXED32 ->
                "TYPE_SFIXED32"

            TYPESFIXED64 ->
                "TYPE_SFIXED64"

            TYPESINT32 ->
                "TYPE_SINT32"

            TYPESINT64 ->
                "TYPE_SINT64"

            KindUnrecognized_ i ->
                "_UNRECOGNIZED_" ++ String.fromInt i


{-| The field numbers for the fields of `Kind`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersKind : Kind -> Int
fieldNumbersKind n_ =
    case n_ of
        TYPEUNKNOWN ->
            0

        TYPEDOUBLE ->
            1

        TYPEFLOAT ->
            2

        TYPEINT64 ->
            3

        TYPEUINT64 ->
            4

        TYPEINT32 ->
            5

        TYPEFIXED64 ->
            6

        TYPEFIXED32 ->
            7

        TYPEBOOL ->
            8

        TYPESTRING ->
            9

        TYPEGROUP ->
            10

        TYPEMESSAGE ->
            11

        TYPEBYTES ->
            12

        TYPEUINT32 ->
            13

        TYPEENUM ->
            14

        TYPESFIXED32 ->
            15

        TYPESFIXED64 ->
            16

        TYPESINT32 ->
            17

        TYPESINT64 ->
            18

        KindUnrecognized_ m_ ->
            m_


{-| Default for Kind. Should only be used for 'required' decoders as an initial value.

-}
defaultKind : Kind
defaultKind =
    TYPEUNKNOWN


{-| Declares how to encode a `Kind` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeKind : Kind -> Protobuf.Encode.Encoder
encodeKind value =
    Protobuf.Encode.int32 <|
        case value of
            TYPEUNKNOWN ->
                0

            TYPEDOUBLE ->
                1

            TYPEFLOAT ->
                2

            TYPEINT64 ->
                3

            TYPEUINT64 ->
                4

            TYPEINT32 ->
                5

            TYPEFIXED64 ->
                6

            TYPEFIXED32 ->
                7

            TYPEBOOL ->
                8

            TYPESTRING ->
                9

            TYPEGROUP ->
                10

            TYPEMESSAGE ->
                11

            TYPEBYTES ->
                12

            TYPEUINT32 ->
                13

            TYPEENUM ->
                14

            TYPESFIXED32 ->
                15

            TYPESFIXED64 ->
                16

            TYPESINT32 ->
                17

            TYPESINT64 ->
                18

            KindUnrecognized_ i ->
                i


{-| Declares how to decode a `Kind` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeKind : Protobuf.Decode.Decoder Kind
decodeKind =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        TYPEUNKNOWN

                    1 ->
                        TYPEDOUBLE

                    2 ->
                        TYPEFLOAT

                    3 ->
                        TYPEINT64

                    4 ->
                        TYPEUINT64

                    5 ->
                        TYPEINT32

                    6 ->
                        TYPEFIXED64

                    7 ->
                        TYPEFIXED32

                    8 ->
                        TYPEBOOL

                    9 ->
                        TYPESTRING

                    10 ->
                        TYPEGROUP

                    11 ->
                        TYPEMESSAGE

                    12 ->
                        TYPEBYTES

                    13 ->
                        TYPEUINT32

                    14 ->
                        TYPEENUM

                    15 ->
                        TYPESFIXED32

                    16 ->
                        TYPESFIXED64

                    17 ->
                        TYPESINT32

                    18 ->
                        TYPESINT64

                    _ ->
                        KindUnrecognized_ i
            )


{-| `Kind` enumeration

-}
type Kind
    = TYPEUNKNOWN
    | TYPEDOUBLE
    | TYPEFLOAT
    | TYPEINT64
    | TYPEUINT64
    | TYPEINT32
    | TYPEFIXED64
    | TYPEFIXED32
    | TYPEBOOL
    | TYPESTRING
    | TYPEGROUP
    | TYPEMESSAGE
    | TYPEBYTES
    | TYPEUINT32
    | TYPEENUM
    | TYPESFIXED32
    | TYPESFIXED64
    | TYPESINT32
    | TYPESINT64
    | KindUnrecognized_ Int
