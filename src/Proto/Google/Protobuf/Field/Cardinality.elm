{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Google.Protobuf.Field.Cardinality exposing (Cardinality(..), decodeCardinality, defaultCardinality, encodeCardinality, fieldNumbersCardinality, jsonDecodeCardinality, jsonEncodeCardinality)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.0-beta.0
- `protoc` 3.19.4
- the following specification files: `google/protobuf/type.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version 1.2.0 or higher.

@docs Cardinality, decodeCardinality, defaultCardinality, encodeCardinality, fieldNumbersCardinality, jsonDecodeCardinality

@docs jsonEncodeCardinality

-}

import Json.Decode
import Json.Encode
import Protobuf.Decode
import Protobuf.Encode
import String


{-| Decode a `Cardinality` from JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonDecodeCardinality : Json.Decode.Decoder Cardinality
jsonDecodeCardinality =
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.map
                (\i ->
                    case i of
                        "CARDINALITY_UNKNOWN" ->
                            CARDINALITYUNKNOWN

                        "CARDINALITY_OPTIONAL" ->
                            CARDINALITYOPTIONAL

                        "CARDINALITY_REQUIRED" ->
                            CARDINALITYREQUIRED

                        "CARDINALITY_REPEATED" ->
                            CARDINALITYREPEATED

                        _ ->
                            CARDINALITYUNKNOWN
                )
        , Json.Decode.int
            |> Json.Decode.map
                (\i ->
                    case i of
                        0 ->
                            CARDINALITYUNKNOWN

                        1 ->
                            CARDINALITYOPTIONAL

                        2 ->
                            CARDINALITYREQUIRED

                        3 ->
                            CARDINALITYREPEATED

                        _ ->
                            CARDINALITYUNKNOWN
                )
        ]


{-| Encode a `Cardinality` to JSON. Uses the canonical encoding described here: https://protobuf.dev/programming-guides/proto3/#json

-}
jsonEncodeCardinality : Cardinality -> Json.Encode.Value
jsonEncodeCardinality value =
    Json.Encode.string <|
        case value of
            CARDINALITYUNKNOWN ->
                "CARDINALITY_UNKNOWN"

            CARDINALITYOPTIONAL ->
                "CARDINALITY_OPTIONAL"

            CARDINALITYREQUIRED ->
                "CARDINALITY_REQUIRED"

            CARDINALITYREPEATED ->
                "CARDINALITY_REPEATED"

            CardinalityUnrecognized_ i ->
                "_UNRECOGNIZED_" ++ String.fromInt i


{-| The field numbers for the fields of `Cardinality`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCardinality : Cardinality -> Int
fieldNumbersCardinality n_ =
    case n_ of
        CARDINALITYUNKNOWN ->
            0

        CARDINALITYOPTIONAL ->
            1

        CARDINALITYREQUIRED ->
            2

        CARDINALITYREPEATED ->
            3

        CardinalityUnrecognized_ m_ ->
            m_


{-| Default for Cardinality. Should only be used for 'required' decoders as an initial value.

-}
defaultCardinality : Cardinality
defaultCardinality =
    CARDINALITYUNKNOWN


{-| Declares how to encode a `Cardinality` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCardinality : Cardinality -> Protobuf.Encode.Encoder
encodeCardinality value =
    Protobuf.Encode.int32 <|
        case value of
            CARDINALITYUNKNOWN ->
                0

            CARDINALITYOPTIONAL ->
                1

            CARDINALITYREQUIRED ->
                2

            CARDINALITYREPEATED ->
                3

            CardinalityUnrecognized_ i ->
                i


{-| Declares how to decode a `Cardinality` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCardinality : Protobuf.Decode.Decoder Cardinality
decodeCardinality =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        CARDINALITYUNKNOWN

                    1 ->
                        CARDINALITYOPTIONAL

                    2 ->
                        CARDINALITYREQUIRED

                    3 ->
                        CARDINALITYREPEATED

                    _ ->
                        CardinalityUnrecognized_ i
            )


{-| `Cardinality` enumeration

-}
type Cardinality
    = CARDINALITYUNKNOWN
    | CARDINALITYOPTIONAL
    | CARDINALITYREQUIRED
    | CARDINALITYREPEATED
    | CardinalityUnrecognized_ Int
